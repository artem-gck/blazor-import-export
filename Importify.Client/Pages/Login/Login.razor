@page "/login"

@layout LoginLayout

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAuthService _authService

<PageTitle>Вход</PageTitle>

<div class="loginPage">
    <div class="loginHeader">
        <h2 class="loginText">Вход в аккаунт</h2>
        <br/>
        <h4 class="loginText comm">Выполните вход в приложение, используя логин и пароль</h4>
    </div>
    <div class="loginForm">
        <br/>
        <p class="formText">Логин</p>
        <input class="input" type="text" @bind="@Login1"/>
        <br/>
        <p class="formText">Пароль</p>
        <input class="input" type="password" @bind="@Password1"/>
        <span class="errorOfPassword">@error</span>
        <br/>
        <div class="forgotPasswordPlace">
            <a href="/forgotPassword" class="forgotPassword">Забыли пароль?</a>
            <br/>
            <a href="/registration" class="registrationLink">Нет аккаунта?</a>
        </div>
    </div>
    <div class="buttonPlace">
        <button class="acceptButton" @onclick="@(e => SendData())">Вход в аккаунт</button>
    </div>
</div>

@code {
    private string Login1 { get; set; }
    private string Password1 { get; set; }

    private string error;

    private async Task SendData()
    {
        var model = new LoginUser()
        {
            Login = Login1,
            Password = Password1,
        };

        var tokens = await _authService.Login(model);

        if (tokens is null)
        {
            error = "Пароль или догин не верные";
            return;
        }

        await Authenticate(tokens);
        NavManager.NavigateTo("/countryes");
    }

    private async Task Authenticate(Tokens model)
    {
        await localStorage.SetItemAsync("access_token", model.AccessToken);
        await localStorage.SetItemAsync("refresh_token", model.RefreshToken);
    }
}