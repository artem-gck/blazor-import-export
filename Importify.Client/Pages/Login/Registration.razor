@page "/registration"
@using System.Text.RegularExpressions
@layout LoginLayout

<PageTitle>Регистрация</PageTitle>

<div class="loginPage">
    <div class="loginHeader">
        <h2 class="loginText">Регистрация</h2>
        <br/>
        <h4 class="loginText comm">Для регистрации в приложении необходимо ввести следующие данные</h4>
    </div>
    <div class="loginForm">
        <br/>
        <p class="formText">Электронная почта</p>
        <input class="input" type="text" @bind="@Email"/>
        <br/>
        <p class="formText">Логин</p>
        <input class="input" type="text" @bind="@Login"/>
        <br/>
        <p class="formText">Пароль</p>
        <input class="input" type="password" @bind="@Password"/>
        <br/>
        <p class="formText">Повторите пароль</p>
        <input class="input" type="password" @bind="@AnotherPassword"/>
        <span class="errorOfPassword">@error</span>
        <br/>
        <div class="forgotPasswordPlace">
            <a href="/login" class="registrationLink">Уже есть аккаунт?</a>
        </div>
    </div>
    <div class="buttonPlace">
        <button class="acceptButton" @onclick="@(e => SendData())">Создать аккаунт</button>
    </div>
</div>

@code {
    [Inject]
    private IAuthService _authService { get; set; }

    private string Email { get; set; }
    private string Login { get; set; }
    private string Password { get; set; }
    private string AnotherPassword { get; set; }

    private Regex regexForEmail = new Regex(@"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    private string error;
    private const string Position = "user";

    private async Task SendData()
    {
        if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Login) || string.IsNullOrWhiteSpace(Password) || string.IsNullOrWhiteSpace(AnotherPassword))
        {
            error = "Поля не могут быть пустыми";
            return;
        }
        else if (!regexForEmail.IsMatch(Email))
        {
            error = "Формат email неправильный";
            return;
        }
        else if (Password != AnotherPassword)
        {
            error = "Пароли не совпадают";
            return;
        }

        var model = new RegistrationUser()
        {
            Login = Login,
            Password = Password,
            Email = Email,
            Role = Position
        };

        if (await _authService.Registration(model) != -1)
            NavManager.NavigateTo("/");
        else
            error = "Пользователь не зарегестрирован";
    }
}