@inject IJSRuntime JS
@inject IIgniteUIBlazor IgniteUIBlazor
@inject IExcelGenerator _excelGenerator
@inject IPlotService _plotService

<div>
    <div class="title">Доля стран в экспорте по категории</div>
    <br/>
    <br/>
    <div class="container vertical">
        <div class="container vertical">
            @if (data != null)
            {
                <IgbDoughnutChart Height="380px" 
                                  Width="80%" 
                                  @ref="Chart"
                                  AllowSliceExplosion="true" >
                    <IgbRingSeries DataSource="data"
                                   LabelMemberPath="Summary"
                                   LabelsPosition="LabelsPosition.OutsideEnd"
                                   LabelExtent="30"
                                   ValueMemberPath="Value"
                                   LegendLabelMemberPath="Country"
                                   Outlines="white"
                                   RadiusFactor="0.8"
							       StartAngle="33">
                    </IgbRingSeries>
                </IgbDoughnutChart>
            }
        </div>
    </div>
</div>
<div>
    <button @onclick="async e => await DownloadFileFromStream()">Сохранить</button>
    <button @onclick="OnClickCallback">Назад</button>
</div>

@code {
    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    [Parameter]
    public string CategoryName { get; set; }

    [Parameter]
    public int YearValue { get; set; }

    public IgbItemLegend Legend;
    public IgbDoughnutChart Chart;
    public List<CategoryShare> data;

    protected override async void OnInitialized()
    {
        data = await _plotService.GetCategoryShareExport(CategoryName, YearValue);

        StateHasChanged();

        IgbDoughnutChartModule.Register(IgniteUIBlazor);
        IgbItemLegendModule.Register(IgniteUIBlazor);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (Chart != null && Legend != null && !firstRender)
            this.Chart.ActualSeries[0].Legend = Legend;
    }

    protected void OnSliceClick(IgbSliceClickEventArgs e)
    {
    }

    private async Task DownloadFileFromStream()
    {
        var file = await _excelGenerator.GenerateShareOfCountriesExportTable(data);
        var fileStream = new MemoryStream(file);

        var fileName = $"Страны в экспорте {CategoryName} {YearValue}.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}