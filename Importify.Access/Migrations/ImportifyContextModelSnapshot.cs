// <auto-generated />
using System;
using Importify.Access.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Importify.Access.Migrations
{
    [DbContext(typeof(ImportifyContext))]
    partial class ImportifyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Importify.Access.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Importify.Access.Entities.CategoryExport", b =>
                {
                    b.Property<int>("CategoryExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryExportId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("CategoryExportId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("YearId");

                    b.ToTable("CategoryExports");
                });

            modelBuilder.Entity("Importify.Access.Entities.CategoryImport", b =>
                {
                    b.Property<int>("CategoryImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryImportId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("CategoryImportId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("YearId");

                    b.ToTable("CategoryImports");
                });

            modelBuilder.Entity("Importify.Access.Entities.CommonExport", b =>
                {
                    b.Property<int>("CommonExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommonExportId"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("CommonExportId");

                    b.HasIndex("CountryId");

                    b.HasIndex("YearId");

                    b.ToTable("CommonExports");
                });

            modelBuilder.Entity("Importify.Access.Entities.CommonImport", b =>
                {
                    b.Property<int>("CommonImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommonImportId"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("CommonImportId");

                    b.HasIndex("CountryId");

                    b.HasIndex("YearId");

                    b.ToTable("CommonImports");
                });

            modelBuilder.Entity("Importify.Access.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<decimal?>("Gdp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Importify.Access.Entities.Massage", b =>
                {
                    b.Property<int>("MassageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MassageId"), 1L, 1);

                    b.Property<string>("MassageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MassageId");

                    b.HasIndex("UserId");

                    b.ToTable("Massages");
                });

            modelBuilder.Entity("Importify.Access.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Importify.Access.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Importify.Access.Entities.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserInfoId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Importify.Access.Entities.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"), 1L, 1);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("YearId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Importify.Access.Entities.CategoryExport", b =>
                {
                    b.HasOne("Importify.Access.Entities.Category", "Category")
                        .WithMany("CategoryExports")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Importify.Access.Entities.Country", "Country")
                        .WithMany("CategoryExports")
                        .HasForeignKey("CountryId");

                    b.HasOne("Importify.Access.Entities.Year", "Year")
                        .WithMany("CategoryExports")
                        .HasForeignKey("YearId");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Importify.Access.Entities.CategoryImport", b =>
                {
                    b.HasOne("Importify.Access.Entities.Category", "Category")
                        .WithMany("CategoryImports")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Importify.Access.Entities.Country", "Country")
                        .WithMany("CategoryImports")
                        .HasForeignKey("CountryId");

                    b.HasOne("Importify.Access.Entities.Year", "Year")
                        .WithMany("CategoryImports")
                        .HasForeignKey("YearId");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Importify.Access.Entities.CommonExport", b =>
                {
                    b.HasOne("Importify.Access.Entities.Country", "Country")
                        .WithMany("CommonExports")
                        .HasForeignKey("CountryId");

                    b.HasOne("Importify.Access.Entities.Year", "Year")
                        .WithMany("CommonExports")
                        .HasForeignKey("YearId");

                    b.Navigation("Country");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Importify.Access.Entities.CommonImport", b =>
                {
                    b.HasOne("Importify.Access.Entities.Country", "Country")
                        .WithMany("CommonImports")
                        .HasForeignKey("CountryId");

                    b.HasOne("Importify.Access.Entities.Year", "Year")
                        .WithMany("CommonImports")
                        .HasForeignKey("YearId");

                    b.Navigation("Country");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Importify.Access.Entities.Massage", b =>
                {
                    b.HasOne("Importify.Access.Entities.User", "User")
                        .WithMany("Massages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Importify.Access.Entities.UserInfo", b =>
                {
                    b.HasOne("Importify.Access.Entities.Role", "Role")
                        .WithMany("UserInfo")
                        .HasForeignKey("RoleId");

                    b.HasOne("Importify.Access.Entities.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Importify.Access.Entities.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Importify.Access.Entities.Category", b =>
                {
                    b.Navigation("CategoryExports");

                    b.Navigation("CategoryImports");
                });

            modelBuilder.Entity("Importify.Access.Entities.Country", b =>
                {
                    b.Navigation("CategoryExports");

                    b.Navigation("CategoryImports");

                    b.Navigation("CommonExports");

                    b.Navigation("CommonImports");
                });

            modelBuilder.Entity("Importify.Access.Entities.Role", b =>
                {
                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Importify.Access.Entities.User", b =>
                {
                    b.Navigation("Massages");

                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Importify.Access.Entities.Year", b =>
                {
                    b.Navigation("CategoryExports");

                    b.Navigation("CategoryImports");

                    b.Navigation("CommonExports");

                    b.Navigation("CommonImports");
                });
#pragma warning restore 612, 618
        }
    }
}
